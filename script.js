let student = {
    name: 'Justine',
    age: 16,
    isGraduating: true
};

console.log(student.name + " " + student.age + " " + student.isGraduating);
console.log(typeof student);

let legal = (student.age >= 18) ? 'Legal' : 'Minor';
console.log(legal);

let array = [5, 1, 3, 4, 2];
for (let i  = 0; i < array.length; i++) {
    console.log(array[i]);
}
for (let i of array) {
    console.log(i);
}
array.forEach(function(e){
    console.log(e);
});
let newArray = array.map(function(e) {
    return e * 5;
});
console.log(newArray);

let x = 0;
for (let e of array) {
    x += e;
    console.log(x);
}
console.log(x/array.length);

function makeConsoleLog() {
    console.log('I am console.log() generated by a function');
}
makeConsoleLog();

const myFirstObject = {
    name: 'Justine',
    age: 16,
    pet: {
        'Pet Name': 'Kitty',
        age: 2,
    }
}

console.log(myFirstObject.name + " " + myFirstObject.pet["Pet Name"]);
console.log(`This ${1+2} is template literals.`);

let stringInter = 36;
console.log(`This ${stringInter} is string interpolations.`);
//Ternary operator
let price = 2;
let day = 'monday';
let priceInc = (day === 'monday') ? price + 1 : price -1;
console.log(`price: ${priceInc}`);
//Arrow function
const arrwFnc = a => a * 2;
console.log(arrwFnc(2));
//Anonymous function
const anonFnc = function(a, b) {
    return a + b
};
console.log(anonFnc(1, 5));
const transform = (a, b) => {
    console.log(a + b);
}
transform(2, 5);

const items = ['apricot', 'banana', 'cherry'];
for (let i = items.length -1; i >= 0; i--){
    console.log(`${i+1}. ${items[i]}`);
}

const sum = (accumulator, currentVal) => {
    return accumulator + currentVal;
}

const FECallback = (e) => {
    console.log(`Element: ${e}`);
}

const filCB = (e) => {
    return e > 3;
}

const mapCB = (e) => {
    return e + ' mapped.';
}
const everyCB = (e) => {
    return e < 0;
}

function recreateArray(...array) {
    if (array !== undefined) {
        this.array = array;
    } else {
        this.array = []
    }

    this.push = (e) => {
        this.array.push(e);
    }

    this.pop = (e) => {
        this.array.pop(e);
    }

    this.reduce = (callback, currentValue) => {
        let accumulator = (currentValue === undefined) ? this.array[0] : currentValue;
        let strIdx = (currentValue === undefined) ? 1 : 0;
        for(let i = strIdx; i < this.array.length; i++) {
            accumulator = callback(accumulator, this.array[i]);
        }
        return accumulator;
    }

    this.forEach = (callback) => {
        for(let i = 0; i < this.array.length; i++) {
           callback(this.array[i]);
        }
    }
    //Filters the array and return a new array
    this.filter = (callback) => {
        let newArray = [];
        for(let i = 0; i < this.array.length; i++) {
            if (callback(this.array[i])) {
                newArray.push(this.array[i]);
            }
        }
        return newArray;
    }

    //Maps the array and return a modified array
    this.map = (callback) => {
        let newArray = [];
        for(let i = 0; i < this.array.length; i++) {
            newArray.push(callback(this.array[i]));
        }
        return newArray;
    }
    this.every = (callback) => {
        let every;
        for (let i = 0; i < this.array.length; i++) {
            every = callback(this.array[i]);
            if (every === false) {
                break;
            }
        }
        return every;
    }
}

recreateArray.prototype.toString = function() {
    return this.array;
};

let myArray = new recreateArray(1, 2, 5, 3);
console.log(myArray.toString());
myArray.push(4);
console.log(myArray.toString());

console.log("Array reduce mimicry: " + myArray.reduce(sum));

myArray.forEach(FECallback);

let myfilteredArray = myArray.filter(filCB);
console.log(myfilteredArray);

let mappedArray = myArray.map(mapCB);
console.log(mappedArray);
let everyArray = myArray.every(everyCB);
console.log('Every element is > 0 ' + everyArray);

let assignedFunction = (e) => {
    console.log(e);
}

let assfjasfja = assignedFunction;

assignedFunction(5);
assfjasfja('asdasdasd');
let xza = assfjasfja;
xza(3343);
console.log(xza.name);

let print = (callback, num) => {
    if(callback(num)) {
        console.log(`The number ${num} is even.`);
    } else {
        console.log(`The number ${num} is odd.`)
    }
}

const isEven = (e) => {
    return e % 2 == 0;
}

print(isEven, 5);
myArray.reduce.isMathFunction = true;
console.log(myArray.reduce.isMathFunction);

//Arrow function
const arrFunc = () => {
    console.log('Arrow function.');
};

//Factory function: used for creating object
const factFunc = (name, age, gender) => {
    return {
        name: name,
        age: age,
        gender: gender,
        displayInfo() {
            console.log(`${name} ${age} ${gender}`);
        }
    }
}
//Constructor function version of the Factor Function above
function factoryFunction(name, age, gender) {
    this.name;
    this.age = age;
    this.gender = gender;
    this.displayInfo = function() {
        console.log(`${name} ${age} ${gender}`);
    };
}

let factFuncObj = factFunc('Justine', 15, 'Male');
factFuncObj.displayInfo();
let facFuncConsVer = new factoryFunction('Lelouch', 666, 'God');
facFuncConsVer.displayInfo();

let mobile = {
    brand: 'Samsung',
    model: 'Galaxy Note 9'
};
delete mobile.brand;

for (let key in mobile) {
    console.log(`${key}: ${mobile[key]}`);
}


const arasda = [5, 'a', true];

for (let e of arasda) {
    console.log(e);
}

/*Pass by reference. Object as an argument is passed by its reference(the object itself) and not by its value
Therefore you can directly change the object inside the function you passed it in because you passed the object itself*/
const passByRef = {name: 'Heliq', age: 15};
let passInt = 9;
console.log(passByRef);
console.log(passInt);

function changeitup(e) {
    e.name = 'Helix';
    e.age = 155;
}

changeitup(passInt);
changeitup(passByRef);
console.log(passByRef);
console.log('Did not change: ' + passInt);


class User {
    constructor(name, email) {
      this._name = name;
      this._email = email;
    }
  
    get userEmail() {
      return this._email;
    }
  }
  
  const person = new User('eddy', 'eddythefreedy9876@gmail.com');
  console.log(person.userEmail);
  

  //Class constructor
  class car {
    constructor(model, brand, year) {
        this.model = model;
        this.brand = brand;
        this.year = year;
    }
  }

  const myCar = new car('rtx0.', 'lenovo', 2050);
  console.log(myCar.year);

  const enums = Object.freeze({
    NORTH: 0,
    SOUTH: 1
  });

  let enum1 = enums.NORTH;

  console.log(enum1);
Object.keys(enums).forEach(e => {
      console.log(e + enums[e]);
})

for (let key in enums) {
      console.log(key + enums[key]);
}

let simplehash = {
    key1: 'value1',
    key2: 'value2'
};

for (let e in simplehash) {
    if(simplehash.hasOwnProperty(e)) {
        console.log(e + simplehash[e]);
    }
}

var maphash = new Map();
maphash.set('key1', 'value1');

for (let [key, value] of maphash) {
    console.log(key, value);
}

function mutuate(a) {
    // a++;
    console.log(++a);
    // return a;
}

let num = 5;
// console.log(mutuate(num));
mutuate(num)
console.log(num);

let arraysdasd = [5, 2, 3];
let asdasdasdasdas = [1, 4];
let xczx = [...arraysdasd, ...asdasdasdasdas];
console.log(xczx);

let btn = document.getElementById('try');
console.log(btn);
btn.addEventListener('click', () => {
    console.log('clicked');
});


//Memoization
let memo = [];

function updateMemo(x) {
    if (memo[x]) {
        return memo[x];
    } else {
        memo[x] = x + ": a";
        return memo[x];
    }
}
console.log(updateMemo(3));
console.log(updateMemo(3));

const newSet = new Set([2, 2, true, true, 2, 'some string', { name: 'John' }]);

console.log(newSet);
console.log(newSet.size);
newSet.add(5);

let srtArray = [2, 5, 1, 4, 3];

let sortCB = (a, b) => {
    return a - b;
}

function sort(callback, array) {
    for(let i of array) {
        for (let i = 0; i < array.length - 1; i++) {
            let itemp = array[i];
            let ii = i + 1;
            console.log(`temp:  ${itemp} ii:  ${array[ii]}`);
            // console.log(callback(itemp, array[ii]));
            if (callback(array[i], array[ii]) >= 0) {
                console.log(`iteration:  ${i}`);
                array[i] = array[ii];
                array[ii] = itemp;
            }
        }
    }
    return array;
}

console.log(sort(sortCB, srtArray));

